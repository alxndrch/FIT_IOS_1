#!/bin/sh

export POSIXLY_CORRECT=yes

print_report_head(){ # $1 prohledavany adresar; $2 pocet adresaru; $3 pocet souboru
    echo "Root directory: $1"
    echo "Directories: $2"
    echo "All files: $3"
    echo "File size histogram:"
}

print_histogram_line(){ # $1 pocet vyskytu v danem intervalu; $2 prexif napr. <100 B
    awk -v len="$1" -v prefix="$2" 'BEGIN {
			printf("  %s: ", prefix);

            for(i=0;i<len;i++)
                printf("#");

            printf("\n");
            } '
}

RET_NORM="" # normalizovany interval; navratova hodnota z funkce
normalize(){ # $1 pocet namerenych hodnot; $2 interval s nejvice soubory ; $3 interval s nejmene soubory ; $4 sirka okna

    RET_NORM=$(awk -v len="$1" -v max="$2" -v min="$3" -v width="$4" 'BEGIN {
            new_val = (len-min)/(max-min)*width

            printf("%.0f", new_val);
            } ')

}

exit_code_process(){

    if [ "$1" -ne "0" ]; then 
        err_msg "perm"
        exit 1
    fi

}

# zprava na chybovy vystup
err_msg(){
    case "$1" in
	input)
        echo "Neplatny vstupni parametr" 1>&2 
        ;;
	regex)
		echo "Regularni vyraz pokryva vstupni adresar" 1>&2 
        ;;
    perm)
        echo "Nedostatecka prava" 1>&2
        ;;
  esac
}

NORM=false # true = nastaven parametr -n; jinak false
DIR="$(pwd)" # prohledavany adresar
DIRS=0 # pocet adresaru
FFILES=0 # pocet souboru 
RE_IGNORE="/" # regularni vyraz pro parametr -i

DIR_SET=false
REG_SET=false

#intervaly 
B100=0
K1=0
K10=0
K100=0
M1=0
M10=0
M100=0
G1=0
OTHER=0

# zpracovani argumentu
while [ "$#" != "0" ]; do
    
    if [ "$1" = "-n" ]; then
        if [ "$NORM" = true ]; then
            err_msg "input"
            exit 1 
        else
            NORM=true
        fi
    elif [ -d "$1" ]; then
        if [ "$DIR_SET" = false ]; then
            DIR="$1"
            DIR_SET=true
        else
            err_msg "input"
            exit 1
        fi
    elif [ "$1" = "-i" ]; then
        if [ "$REG_SET" = true ]; then
            err_msg "input"
            exit 1
        else
            REG_SET=true
        fi
        shift
        if [ "$#" -eq "0" ]; then
            err_msg "input"
            exit 1
        else
            RE_IGNORE=$1
        fi
    else 
        err_msg "input"
        exit 1
    fi

    shift 2>/dev/null
done

if [ "$REG_SET" = false ]; then
    if [ "$(echo "$DIR" | grep -Ex --regexp="/*" 2>/dev/null | wc -l)" != "0" ]; then
        RE_IGNORE=""
    fi
fi

#kontrola, zda regularni vyraz nepokryva pracovni adresar
if [ ! -z "$RE_IGNORE" ]; then 
    if [ ! -z "$(basename "$DIR" | grep -Ex --regexp="$RE_IGNORE" 2>/dev/null)" ]; then
        err_msg "regex" 
        exit 1
    fi
fi



#pridani lomitka na konec cesty; pouze kvuli vyhodnocovani regularnich vyrazu; na konci se vraci zpet
#
SLASH_SET=false
[ $(echo -n "$DIR" | tail -c 1) != "/" ] && DIR="$DIR/" SLASH_SET=true

DIRS=$(find "$DIR" -type d 2>/dev/null)
#exit_code_process $?
DIRS=$(echo "$DIRS" | sed "s:^$DIR::" | grep -Evw --regexp="$RE_IGNORE" 2>/dev/null | wc -l)



FFILES=$(find "$DIR" -type f 2>/dev/null)
#exit_code_process $?
# kdyz adresar nema zadnes soubory FFILES=0 jinak ignorujeme soubory podle regexp
#[ -z "$FFILES" ] && FFILES=0 || FFILES=$(echo "$FFILES" | sed "s:^$DIR::" | grep -Evw --regexp="$RE_IGNORE" 2>/dev/null | wc -l)


OWN_GREP='BEGIN{ RS = "" ; FS = "\n" }{
for(i=1;i<=NF;i++){
    gsub("/","\n",$i)
    if($i !~ pattern){
        gsub("\n","/",$i) 
        print($i)
    }
}  
}'

[ -z "$FFILES" ] && FFILES=0 || FFILES=$(echo "$FFILES" | sed "s:^$DIR::" | awk -v pattern="$RE_IGNORE" "$TEST" | wc -l)

echo "$FFILES"

B100=$(find "$DIR" -type f -size -100c 2>/dev/null | sed "s:^$DIR::" | awk -v pattern="$RE_IGNORE" "$TEST" | wc -l)
K1=$(find "$DIR" -type f  \( -size +100c -o -size 100c \) -a -size -1024c  2>/dev/null | sed "s:^$DIR::" | awk -v pattern="$RE_IGNORE" "$TEST" | wc -l)
K10=$(find "$DIR" -type f  \( -size +1024c -o -size 1024c \) -a -size -10240c 2>/dev/null | sed "s:^$DIR::" | awk -v pattern="$RE_IGNORE" "$TEST" | wc -l)
K100=$(find "$DIR" -type f  \( -size +10240c -o -size 10240c \) -a -size -102400c 2>/dev/null | sed "s:^$DIR::" | awk -v pattern="$RE_IGNORE" "$TEST" | wc -l)
M1=$(find "$DIR" -type f  \( -size +102400c -o -size 102400c \) -a -size -1048576c 2>/dev/null | sed "s:^$DIR::" | awk -v pattern="$RE_IGNORE" "$TEST" | wc -l)
M10=$(find "$DIR" -type f  \( -size +1048576c -o -size 1048576c \) -a -size -10485760c 2>/dev/null | sed "s:^$DIR::" | awk -v pattern="$RE_IGNORE" "$TEST" | wc -l)
M100=$(find "$DIR" -type f  \( -size +10485760c -o -size 10485760c \) -a -size -104857600c 2>/dev/null | sed "s:^$DIR::" | awk -v pattern="$RE_IGNORE" "$TEST" | wc -l)
G1=$(find "$DIR" -type f \( -size +104857600c -o -size 104857600c \) -a -size -1073741824c 2>/dev/null | sed "s:^$DIR::" | awk -v pattern="$RE_IGNORE" "$TEST" | wc -l)
OTHER=$(find "$DIR" -type f -size +1073741824c 2>/dev/null | sed "s:^$DIR::" | awk -v pattern="$RE_IGNORE" "$TEST" | wc -l)



#akw="awk '{ if( $0 ~ /^^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$$/){ print($0)} }'"
#echo "home/alex/Repos/FIT_IOS_1/moje slozka"| tr "/" "\n" |awk -v pattern="^^moje slozka$" '{ for(i=0;i<NF;i++){ if($i ~ pattern){ print($0) }   }  }'s



#pocitani dat do histogramu



#echo $(find "$DIR" -type f -size -100c 2>/dev/null | sed "s:^$DIR::" | awk '{ gsub("/","\n",$0); print $0}')



#for f in "$FFILES_LIST"; do
#    if [ ! -z "$(echo "$f" |sed "s:^$DIR::" | awk '{ gsub("/","\n",$0); print $0}'| grep -Ew --regexp="$RE_IGNORE" 2>/dev/null)" ]; then
#        FFILES_SIZE=0
#        continue
#    fi
#    FFILES_SIZE=$(du "$f") 
#    echo "$FFILES_SIZE"
#    if [ "$FFILES_SIZE" -lt "100" ]; then
#        B100=$((B100+1))
#    elif [ "$FFILES_SIZE" -gt "100" -o "$FFILES_SIZE" -eq "100" ] && [ "$FFILES_SIZE" -lt "1024" ]; then
#        K1=$((K1+1))
#    elif [ "$FFILES_SIZE" -gt "1024" -o "$FFILES_SIZE" -eq "1024" ] && [ "$FFILES_SIZE" -lt "10240" ]; then
#        K10=$((K10+1))
#    elif [ "$FFILES_SIZE" -gt "10240" -o "$FFILES_SIZE" -eq "10240" ] && [ "$FFILES_SIZE" -lt "102400" ]; then
#        K100=$((K100+1))
#    elif [ "$FFILES_SIZE" -gt "102400" -o "$FFILES_SIZE" -eq "102400" ] && [ "$FFILES_SIZE" -lt "1048576" ]; then
#        M1=$((M1+1))
#    elif [ "$FFILES_SIZE" -gt "1048576" -o "$FFILES_SIZE" -eq "1048576" ] && [ "$FFILES_SIZE" -lt "10485760" ]; then
#        M10=$((M10+1))
#    elif [ "$FFILES_SIZE" -gt "10485760" -o "$FFILES_SIZE" -eq "10485760" ] && [ "$FFILES_SIZE" -lt "104857600" ]; then
#        M100=$((M100+1))
#    elif [ "$FFILES_SIZE" -gt "104857600" -o "$FFILES_SIZE" -eq "104857600" ] && [ "$FFILES_SIZE" -lt "1073741824" ]; then
#        G1=$((G1+1))
#    else
#        OTHER=$((OTHER+1))
#    fi
#    FFILES_SIZE=0
#done

#for f in $(echo -e $(find "$DIR" -type f -size -100c 2>/dev/null | sed "s:^$DIR::")); do
#    if [ ! -z "$(echo "$f" | tr "/" "\n" | grep -Evw --regexp="$RE_IGNORE" 2>/dev/null)" ]; then
#        B100=$((B100+1))
#    fi
#done
#
#echo "$B100"
#
#for f in $(echo -e $(find "$DIR" -type f  \( -size +100c -o -size 100c \) -a -size -1024c  2>/dev/null)); do
#    if [ ! -z "$(echo "$f" | tr "/" "\n" | grep -Evw --regexp="$RE_IGNORE" 2>/dev/null)" ]; then
#        K1=$((K1+1))
#    fi
#done
#
#echo "$K1"




# odstaneni posledniho lomitka
[ "$SLASH_SET" = true ] && DIR=${DIR%?}

#normalizace
if [ "$NORM" = "true" ]; then
    if [ -t 1 ]; then
        WINDOW_WIDTH=$(tput cols)
        WINDOW_WIDTH=$(echo "$WINDOW_WIDTH-13" | bc)
    else
        WINDOW_WIDTH=67
    fi

    MAX=0
    MIN=0

    for n in $(echo "$B100 $K1 $K10 $K100 $M1 $M10 $M100 $G1 $OTHER"); do
        if [ "$n" -gt "$MAX" ]; then
            MAX=$n
        elif [ "$n" -lt "$MIN" ]; then
            MIN=$n
        fi
    done


    if [ "$MAX" -gt "$WINDOW_WIDTH" ]; then
        normalize $B100 $MAX $MIN $WINDOW_WIDTH
        B100=$RET_NORM
        normalize $K1 $MAX $MIN $WINDOW_WIDTH
        K1=$RET_NORM
        normalize $K10 $MAX $MIN $WINDOW_WIDTH
        K10=$RET_NORM
        normalize $K100 $MAX $MIN $WINDOW_WIDTH
        K100=$RET_NORM
        normalize $M1 $MAX $MIN $WINDOW_WIDTH
        M1=$RET_NORM
        normalize $M10 $MAX $MIN $WINDOW_WIDTH
        M10=$RET_NORM
        normalize $M100 $MAX $MIN $WINDOW_WIDTH
        M100=$RET_NORM
        normalize $G1 $MAX $MIN $WINDOW_WIDTH
        G1=$RET_NORM
        normalize $OTHER $MAX $MIN $WINDOW_WIDTH
        OTHER=$RET_NORM
    fi

fi

#vypis histogramu
print_report_head "$DIR" "$DIRS" "0"
print_histogram_line "$B100" "<100 B  "
print_histogram_line "$K1" "<1 KiB  "
print_histogram_line "$K10" "<10 KiB "
print_histogram_line "$K100" "<100 KiB"
print_histogram_line "$M1" "<1 MiB  "
print_histogram_line "$M10" "<10 MiB "
print_histogram_line "$M100" "<100 MiB"
print_histogram_line "$G1" "<1 GiB  "
print_histogram_line "$OTHER" ">=1 GiB "

exit 0