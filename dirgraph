#!/bin/sh

POSIXLY_CORRECT=yes

print_report_head(){ # $1 prohledavany adresar; $2 pocet adresaru; $3 pocet souboru
    echo "Root directory: $1"
    echo "Directories: $2"
    echo "All files: $3"
    echo "File size histogram:"
}

print_histogram_line(){ # $1 pocet vyskytu v danem intervalu; $2 prexif napr. <100 B
    awk -v len="$1" -v prefix="$2" 'BEGIN {
			printf("  %s: ", prefix);

            for(i=0;i<len;i++)
                printf("#");

            printf("\n");
            } '
}

RET_NORM="" # normalizovany interval; navratova hodnota z funkce
normalize(){ # $1 pocet namerenych hodnot; $2 interval s nejvice soubory ; $3 interval s nejmene soubory ; $4 sirka okna

    RET_NORM=$(awk -v len="$1" -v max="$2" -v min="$3" -v width="$4" 'BEGIN {
            new_val = (len-min)/(max-min)*width

            printf("%.0f", new_val);
            } ')

}

EXIT_CODE=0 # navratovy kod
exit_code_process(){
    
    if [ "$EXIT_CODE" -eq "0" ]; then
        EXIT_CODE=$1
    fi

}

NORM=false # true = nastaven parametr -n; jinak false
DIR=$(pwd) # prohledavany adresar
DIRS=0 # pocet adresaru
FFILES=0 # pocet souboru 
RE_IGNORE="/" # regularni vyraz pro parametr -i

DIR_SET=false
RET_SET=false

#intervaly 
B100=0
K1=0
K10=0
K100=0
M1=0
M10=0
M100=0
G1=0
OTHER=0

# zpracovani argumentu
while [ "$#" != "0" ]; do
    
    if [ "$1" = "-n" ]; then
        [ "$NORM" = true ]  && exit 1 || NORM=true
    elif [ -d "$1" ]; then
        [ "$DIR_SET" = "false" ] && DIR=$1 && DIR_SET=true || exit 1
    elif [ "$1" = "-i" ]; then
        [ "$REG_SET" = "true" ] && exit 1 || REG_SET=true
        shift
        [ "$#" -eq "0" ] && exit 1 || RE_IGNORE=$1
    else 
        exit 1
    fi

    shift 2>/dev/null
done

BASEDIR="$(basename "$DIR")"

if [ ! -z "$RE_IGNORE" ]; then 
    if [ ! -z "$(echo "$BASEDIR" | grep -E --regexp="$RE_IGNORE" 2>/dev/null)" ]; then
        exit 1
    fi
fi

DIRS=$(find "$DIR" -type d -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null)
exit_code_process $?
DIRS=$(echo "$DIRS" | wc -l)

FFILES=$(find "$DIR" -type f -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null)
exit_code_process $?
[ -z "$FFILES" ] && FFILES=0 || FFILES=$(echo "$FFILES" | wc -l)

#pocitani dat do histogramu
B100=$(find "$DIR" -type f -size -100c -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" | wc -l)
K1=$(find "$DIR" -type f  \( -size +100c -o -size 100c \) -a -size -1024c  2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)
K10=$(find "$DIR" -type f  \( -size +1024c -o -size 1024c \) -a -size -10240c 2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)
K100=$(find "$DIR" -type f  \( -size +10240c -o -size 10240c \) -a -size -102400c 2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)
M1=$(find "$DIR" -type f  \( -size +102400c -o -size 102400c \) -a -size -1048576c 2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)
M10=$(find "$DIR" -type f  \( -size +1048576c -o -size 1048576c \) -a -size -10485760c 2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)
M100=$(find "$DIR" -type f  \( -size +10485760c -o -size 10485760c \) -a -size -104857600c 2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)
G1=$(find "$DIR" -type f \( -size +104857600c -o -size 104857600c \) -a -size -1073741824c 2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)
OTHER=$(find "$DIR" -type f -size +1073741824c 2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)

#normalizace
if [ "$NORM" = "true" ]; then
    if [ -t 1 ]; then
        WINDOW_WIDTH=$(tput cols)
        WINDOW_WIDTH=$(echo "$WINDOW_WIDTH-13" | bc)
    else
        WINDOW_WIDTH=67
        echo "$WINDOW_WIDTH"
    fi

    MAX=0
    MIN=0

    for n in $(echo "$B100 $K1 $K10 $K100 $M1 $M10 $M100 $G1 $OTHER"); do
        if [ "$n" -gt "$MAX" ]; then
            MAX=$n
        elif [ "$n" -lt "$MIN" ]; then
            MIN=$n
        fi
    done


    if [ "$MAX" -gt "$WINDOW_WIDTH" ]; then
        normalize $B100 $MAX $MIN $WINDOW_WIDTH
        B100=$RET_NORM
        normalize $K1 $MAX $MIN $WINDOW_WIDTH
        K1=$RET_NORM
        normalize $K10 $MAX $MIN $WINDOW_WIDTH
        K10=$RET_NORM
        normalize $K100 $MAX $MIN $WINDOW_WIDTH
        K100=$RET_NORM
        normalize $M1 $MAX $MIN $WINDOW_WIDTH
        M1=$RET_NORM
        normalize $M10 $MAX $MIN $WINDOW_WIDTH
        M10=$RET_NORM
        normalize $M100 $MAX $MIN $WINDOW_WIDTH
        M100=$RET_NORM
        normalize $G1 $MAX $MIN $WINDOW_WIDTH
        G1=$RET_NORM
        normalize $OTHER $MAX $MIN $WINDOW_WIDTH
        OTHER=$RET_NORM
    fi

fi

#vypis histogramu
print_report_head $DIR $DIRS $FFILES
print_histogram_line $B100 "<100 B  "
print_histogram_line $K1 "<1 KiB  "
print_histogram_line $K10 "<10 KiB "
print_histogram_line $K100 "<100 KiB"
print_histogram_line $M1 "<1 MiB  "
print_histogram_line $M10 "<10 MiB "
print_histogram_line $M100 "<100 MiB"
print_histogram_line $G1 "<1 GiB  "
print_histogram_line $OTHER ">=1 GiB "

exit "$EXIT_CODE"

#pocitani dat do histogramu
#B100=$(find "$DIR" -type f ! \( -regextype egrep -regex "$RE_IGNORE" \) -a -size -100c 2>/dev/null | wc -l)
#K1=$(find "$DIR" -type f ! \( -regextype egrep -regex "$RE_IGNORE" \) -a  \( -size +100c -o -size 100c \) -a -size -1024c  2>/dev/null | wc -l)
#K10=$(find "$DIR" -type f ! \( -regextype egrep -regex "$RE_IGNORE" \) -a  \( -size +1024c -o -size 1024c \) -a -size -10240c 2>/dev/null | wc -l)
#K100=$(find "$DIR" -type f ! \( -regextype egrep -regex "$RE_IGNORE" \) -a  \( -size +10240c -o -size 10240c \) -a -size -102400c 2>/dev/null | wc -l)
#M1=$(find "$DIR" -type f ! \( -regextype egrep -regex "$RE_IGNORE" \) -a  \( -size +102400c -o -size 102400c \) -a -size -1048576c 2>/dev/null | wc -l)
#M10=$(find "$DIR" -type f ! \( -regextype egrep -regex "$RE_IGNORE" \) -a  \( -size +1048576c -o -size 1048576c \) -a -size -10485760c 2>/dev/null | wc -l)
#M100=$(find "$DIR" -type f ! \( -regextype egrep -regex "$RE_IGNORE" \) -a  \( -size +10485760c -o -size 10485760c \) -a -size -104857600c 2>/dev/null | wc -l)
#G1=$(find "$DIR" -type f ! \( -regextype egrep -regex "$RE_IGNORE" \) -a  \( -size +104857600c -o -size 104857600c \) -a -size -1073741824c 2>/dev/null | wc -l)
#OTHER=$(find "$DIR" -type f ! \( -regextype egrep -regex "$RE_IGNORE" \) -a  -size +1073741824c 2>/dev/null | wc -l)

#B100=$(find "$DIR" -type f -size -100c -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" | wc -l)
#K1=$(find "$DIR" -type f  \( -size +100c -o -size 100c \) -a -size -1024c  2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)
#K10=$(find "$DIR" -type f  \( -size +1024c -o -size 1024c \) -a -size -10240c 2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)
#K100=$(find "$DIR" -type f  \( -size +10240c -o -size 10240c \) -a -size -102400c 2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)
#M1=$(find "$DIR" -type f  \( -size +102400c -o -size 102400c \) -a -size -1048576c 2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)
#M10=$(find "$DIR" -type f  \( -size +1048576c -o -size 1048576c \) -a -size -10485760c 2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)
#M100=$(find "$DIR" -type f  \( -size +10485760c -o -size 10485760c \) -a -size -104857600c 2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)
#G1=$(find "$DIR" -type f \( -size +104857600c -o -size 104857600c \) -a -size -1073741824c 2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)
#OTHER=$(find "$DIR" -type f -size +1073741824c 2>/dev/null -exec basename {} \; | grep -E -v --regexp="$RE_IGNORE" 2>/dev/null | wc -l)